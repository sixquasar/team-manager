-- ============================================================================
-- SISTEMA TEAM MANAGER COMPLETO - BASEADO NO HELIOGEN
-- Sistema de gestão de equipe para 3 pessoas
-- Arquitetura robusta com autenticação própria
-- Desenvolvido por: sixquasar
-- ============================================================================

-- 1. REMOVER TABELAS EXISTENTES (se houver)
DROP TABLE IF EXISTS public.team_messages CASCADE;
DROP TABLE IF EXISTS public.productivity_metrics CASCADE;
DROP TABLE IF EXISTS public.timeline CASCADE;
DROP TABLE IF EXISTS public.team_projects CASCADE;
DROP TABLE IF EXISTS public.tasks CASCADE;
DROP TABLE IF EXISTS public.team_members CASCADE;
DROP TABLE IF EXISTS public.user_teams CASCADE;
DROP TABLE IF EXISTS public.teams CASCADE;
DROP TABLE IF EXISTS public.sessoes CASCADE;
DROP TABLE IF EXISTS public.usuarios CASCADE;

-- 2. SISTEMA DE AUTENTICAÇÃO PRÓPRIO (baseado no HelioGen)
CREATE TABLE public.usuarios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    senha_hash VARCHAR(255) NOT NULL,
    nome VARCHAR(255) NOT NULL,
    cargo VARCHAR(100),
    avatar_url TEXT,
    tipo VARCHAR(50) DEFAULT 'membro',
    ativo BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. TABELA DE SESSÕES
CREATE TABLE public.sessoes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    usuario_id UUID REFERENCES usuarios(id) ON DELETE CASCADE,
    token VARCHAR(500) NOT NULL,
    expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. TABELA DE EQUIPES
CREATE TABLE public.teams (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    nome VARCHAR(255) NOT NULL,
    descricao TEXT,
    owner_id UUID REFERENCES usuarios(id) ON DELETE CASCADE,
    max_members INTEGER DEFAULT 3,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. MEMBROS DA EQUIPE
CREATE TABLE public.team_members (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID REFERENCES teams(id) ON DELETE CASCADE,
    usuario_id UUID REFERENCES usuarios(id) ON DELETE CASCADE,
    cargo VARCHAR(100),
    nivel_acesso VARCHAR(50) DEFAULT 'membro', -- owner, admin, membro
    ativo BOOLEAN DEFAULT true,
    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(team_id, usuario_id)
);

-- 6. TAREFAS KANBAN
CREATE TABLE public.tasks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID REFERENCES teams(id) ON DELETE CASCADE,
    titulo VARCHAR(255) NOT NULL,
    descricao TEXT,
    status VARCHAR(50) DEFAULT 'todo', -- todo, in_progress, review, done
    prioridade VARCHAR(50) DEFAULT 'medium', -- low, medium, high, urgent
    assigned_to UUID REFERENCES usuarios(id),
    created_by UUID REFERENCES usuarios(id),
    due_date TIMESTAMP WITH TIME ZONE,
    estimated_hours INTEGER,
    actual_hours INTEGER,
    tags JSONB DEFAULT '[]',
    position_in_column INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 7. PROJETOS DA EQUIPE
CREATE TABLE public.team_projects (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID REFERENCES teams(id) ON DELETE CASCADE,
    nome VARCHAR(255) NOT NULL,
    descricao TEXT,
    status VARCHAR(50) DEFAULT 'planejamento', -- planejamento, em_andamento, concluido, pausado
    data_inicio DATE,
    data_fim_prevista DATE,
    data_fim_real DATE,
    budget DECIMAL(10,2),
    progresso INTEGER DEFAULT 0, -- 0-100
    gerente_id UUID REFERENCES usuarios(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 8. TIMELINE DE ATIVIDADES
CREATE TABLE public.timeline (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID REFERENCES teams(id) ON DELETE CASCADE,
    usuario_id UUID REFERENCES usuarios(id),
    tipo VARCHAR(50) NOT NULL, -- task_created, task_completed, project_started, etc
    titulo VARCHAR(255) NOT NULL,
    descricao TEXT,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 9. MENSAGENS DA EQUIPE
CREATE TABLE public.team_messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID REFERENCES teams(id) ON DELETE CASCADE,
    usuario_id UUID REFERENCES usuarios(id),
    mensagem TEXT NOT NULL,
    tipo VARCHAR(50) DEFAULT 'message', -- message, announcement, system
    reply_to UUID REFERENCES team_messages(id),
    attachments JSONB DEFAULT '[]',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 10. MÉTRICAS DE PRODUTIVIDADE
CREATE TABLE public.productivity_metrics (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    team_id UUID REFERENCES teams(id) ON DELETE CASCADE,
    usuario_id UUID REFERENCES usuarios(id),
    data DATE NOT NULL,
    tasks_completed INTEGER DEFAULT 0,
    hours_worked DECIMAL(5,2) DEFAULT 0,
    efficiency_score DECIMAL(5,2) DEFAULT 0, -- 0-100
    quality_score DECIMAL(5,2) DEFAULT 0, -- 0-100
    collaboration_score DECIMAL(5,2) DEFAULT 0, -- 0-100
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(team_id, usuario_id, data)
);

-- 11. DESABILITAR RLS (Row Level Security)
ALTER TABLE usuarios DISABLE ROW LEVEL SECURITY;
ALTER TABLE sessoes DISABLE ROW LEVEL SECURITY;
ALTER TABLE teams DISABLE ROW LEVEL SECURITY;
ALTER TABLE team_members DISABLE ROW LEVEL SECURITY;
ALTER TABLE tasks DISABLE ROW LEVEL SECURITY;
ALTER TABLE team_projects DISABLE ROW LEVEL SECURITY;
ALTER TABLE timeline DISABLE ROW LEVEL SECURITY;
ALTER TABLE team_messages DISABLE ROW LEVEL SECURITY;
ALTER TABLE productivity_metrics DISABLE ROW LEVEL SECURITY;

-- 12. FUNÇÕES RPC PARA AUTENTICAÇÃO (baseadas no HelioGen)
CREATE OR REPLACE FUNCTION login_usuario(email_param TEXT, senha_param TEXT)
RETURNS TABLE(
    success BOOLEAN,
    message TEXT,
    token TEXT,
    usuario JSONB
) LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
    usuario_rec RECORD;
    novo_token TEXT;
    expires_at TIMESTAMP WITH TIME ZONE;
BEGIN
    -- Buscar usuário
    SELECT * INTO usuario_rec FROM usuarios 
    WHERE email = email_param AND ativo = true;
    
    IF NOT FOUND THEN
        RETURN QUERY SELECT false, 'Usuário não encontrado'::TEXT, ''::TEXT, '{}'::JSONB;
        RETURN;
    END IF;
    
    -- Verificar senha (simulação - em produção usar bcrypt)
    IF usuario_rec.senha_hash != encode(digest(senha_param, 'sha256'), 'hex') THEN
        RETURN QUERY SELECT false, 'Senha incorreta'::TEXT, ''::TEXT, '{}'::JSONB;
        RETURN;
    END IF;
    
    -- Gerar token
    novo_token := encode(gen_random_bytes(32), 'base64');
    expires_at := NOW() + INTERVAL '24 hours';
    
    -- Salvar sessão
    INSERT INTO sessoes (usuario_id, token, expires_at)
    VALUES (usuario_rec.id, novo_token, expires_at);
    
    -- Retornar sucesso
    RETURN QUERY SELECT 
        true,
        'Login realizado com sucesso'::TEXT,
        novo_token,
        json_build_object(
            'id', usuario_rec.id,
            'email', usuario_rec.email,
            'nome', usuario_rec.nome,
            'cargo', usuario_rec.cargo,
            'tipo', usuario_rec.tipo
        )::JSONB;
END;
$$;

CREATE OR REPLACE FUNCTION verificar_sessao(token_param TEXT)
RETURNS TABLE(
    valid BOOLEAN,
    usuario JSONB
) LANGUAGE plpgsql SECURITY DEFINER AS $$
DECLARE
    sessao_rec RECORD;
    usuario_rec RECORD;
BEGIN
    -- Buscar sessão válida
    SELECT * INTO sessao_rec FROM sessoes s
    JOIN usuarios u ON s.usuario_id = u.id
    WHERE s.token = token_param 
    AND s.expires_at > NOW()
    AND u.ativo = true;
    
    IF NOT FOUND THEN
        RETURN QUERY SELECT false, '{}'::JSONB;
        RETURN;
    END IF;
    
    -- Buscar dados do usuário
    SELECT * INTO usuario_rec FROM usuarios WHERE id = sessao_rec.usuario_id;
    
    RETURN QUERY SELECT 
        true,
        json_build_object(
            'id', usuario_rec.id,
            'email', usuario_rec.email,
            'nome', usuario_rec.nome,
            'cargo', usuario_rec.cargo,
            'tipo', usuario_rec.tipo
        )::JSONB;
END;
$$;

-- 13. DADOS INICIAIS (3 usuários da equipe)
INSERT INTO usuarios (email, senha_hash, nome, cargo, tipo) VALUES
('ricardo@techsquad.com', encode(digest('senha123', 'sha256'), 'hex'), 'Ricardo Landim', 'Tech Lead', 'owner'),
('ana@techsquad.com', encode(digest('senha123', 'sha256'), 'hex'), 'Ana Silva', 'Developer', 'membro'),
('carlos@techsquad.com', encode(digest('senha123', 'sha256'), 'hex'), 'Carlos Santos', 'Designer', 'membro');

-- 14. EQUIPE INICIAL
INSERT INTO teams (nome, descricao, owner_id) 
SELECT 'Tech Squad', 'Equipe de desenvolvimento de alta performance', id 
FROM usuarios WHERE email = 'ricardo@techsquad.com';

-- 15. ADICIONAR MEMBROS À EQUIPE
INSERT INTO team_members (team_id, usuario_id, cargo, nivel_acesso)
SELECT t.id, u.id, u.cargo, 
    CASE 
        WHEN u.tipo = 'owner' THEN 'owner'
        ELSE 'membro'
    END
FROM teams t, usuarios u 
WHERE t.nome = 'Tech Squad';

-- 16. TAREFAS INICIAIS
INSERT INTO tasks (team_id, titulo, descricao, status, prioridade, assigned_to, created_by)
SELECT 
    t.id,
    'Configurar ambiente de desenvolvimento',
    'Instalar e configurar todas as ferramentas necessárias',
    'todo',
    'high',
    u_ana.id,
    u_ricardo.id
FROM teams t,
    (SELECT id FROM usuarios WHERE email = 'ricardo@techsquad.com') u_ricardo,
    (SELECT id FROM usuarios WHERE email = 'ana@techsquad.com') u_ana
WHERE t.nome = 'Tech Squad';

INSERT INTO tasks (team_id, titulo, descricao, status, prioridade, assigned_to, created_by)
SELECT 
    t.id,
    'Criar design system',
    'Desenvolver componentes reutilizáveis para o sistema',
    'in_progress',
    'medium',
    u_carlos.id,
    u_ricardo.id
FROM teams t,
    (SELECT id FROM usuarios WHERE email = 'ricardo@techsquad.com') u_ricardo,
    (SELECT id FROM usuarios WHERE email = 'carlos@techsquad.com') u_carlos
WHERE t.nome = 'Tech Squad';

-- 17. PROJETO INICIAL
INSERT INTO team_projects (team_id, nome, descricao, status, data_inicio, data_fim_prevista, gerente_id)
SELECT 
    t.id,
    'Team Manager v1.0',
    'Desenvolvimento do sistema de gestão de equipe',
    'em_andamento',
    CURRENT_DATE,
    CURRENT_DATE + INTERVAL '30 days',
    u.id
FROM teams t, usuarios u 
WHERE t.nome = 'Tech Squad' AND u.email = 'ricardo@techsquad.com';

-- 18. ENTRADA NA TIMELINE
INSERT INTO timeline (team_id, usuario_id, tipo, titulo, descricao)
SELECT 
    t.id,
    u.id,
    'system',
    'Equipe criada',
    'Tech Squad foi criada com 3 membros'
FROM teams t, usuarios u 
WHERE t.nome = 'Tech Squad' AND u.email = 'ricardo@techsquad.com';

-- ============================================================================
-- SISTEMA TEAM MANAGER CONFIGURADO COM SUCESSO!
-- 
-- 👥 Usuários criados:
--    - ricardo@techsquad.com / senha123 (Tech Lead - Owner)
--    - ana@techsquad.com / senha123 (Developer)  
--    - carlos@techsquad.com / senha123 (Designer)
--
-- 🚀 Sistema pronto para uso com:
--    ✅ Autenticação própria baseada no HelioGen
--    ✅ Equipe de 3 pessoas configurada
--    ✅ Tarefas Kanban iniciais
--    ✅ Projeto em andamento
--    ✅ Timeline de atividades
--    ✅ Estrutura completa de BD
--
-- 👨‍💻 Desenvolvido por: sixquasar
-- 🏗️ Baseado na arquitetura: HelioGen
-- ============================================================================