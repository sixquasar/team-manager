#!/bin/bash

# ============================================================================
# TEAM MANAGER - DEPLOY COMPLETO PARA SIXQUASAR.PRO
# Sistema de gest√£o de equipe para 3 pessoas
# Baseado na arquitetura robusta do HelioGen
# Desenvolvido por: sixquasar
# ============================================================================

# Vers√£o do script
VERSION="1.0.0"

# Cores para formata√ß√£o
VERDE='\033[0;32m'
VERMELHO='\033[0;31m'
AMARELO='\033[1;33m'
AZUL='\033[0;34m'
MAGENTA='\033[0;35m'
RESET='\033[0m'
NEGRITO='\033[1m'

# Configura√ß√µes do Team Manager
DOMAIN="sixquasar.pro"
VPS_IP="96.43.96.21"
APP_DIR="/var/www/team-manager"
REPO_URL="https://github.com/sixquasar/team-manager.git"
BRANCH="main"
EMAIL="contact@sixquasar.pro"
SERVICE_NAME="team-manager"

# Diret√≥rio do script
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CHECKPOINT_FILE="${SCRIPT_DIR}/.deploy_team_checkpoint"
LOG_FILE="${SCRIPT_DIR}/deploy_team_$(date +%Y%m%d_%H%M%S).log"

# Fun√ß√£o de log
log() {
    local message="$1"
    local type="$2"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    
    case $type in
        "info") echo -e "${AZUL}[INFO]${RESET} ${timestamp} - ${message}" | tee -a $LOG_FILE ;;
        "success") echo -e "${VERDE}[SUCESSO]${RESET} ${timestamp} - ${message}" | tee -a $LOG_FILE ;;
        "warning") echo -e "${AMARELO}[AVISO]${RESET} ${timestamp} - ${message}" | tee -a $LOG_FILE ;;
        "error") echo -e "${VERMELHO}[ERRO]${RESET} ${timestamp} - ${message}" | tee -a $LOG_FILE ;;
        "phase") echo -e "\n${MAGENTA}${NEGRITO}[FASE $3]${RESET} ${MAGENTA}${NEGRITO}${message}${RESET}\n" | tee -a $LOG_FILE ;;
        *) echo -e "${timestamp} - ${message}" | tee -a $LOG_FILE ;;
    esac
}

# ASCII Art do Team Manager
show_banner() {
    clear
    echo -e "${AZUL}${NEGRITO}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó                          ‚ïë"
    echo "‚ïë  ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë                          ‚ïë"
    echo "‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë                          ‚ïë"
    echo "‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë                          ‚ïë"
    echo "‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë                          ‚ïë"
    echo "‚ïë     ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù                          ‚ïë"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïë  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïë"
    echo "‚ïë  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïë"
    echo "‚ïë  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïë"
    echo "‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïë"
    echo "‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïë"
    echo "‚ïë  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïë"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïë          ${AMARELO}üöÄ SISTEMA DE GEST√ÉO DE EQUIPE SIXQUASAR üöÄ${AZUL}           ‚ïë"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïë  ${VERDE}‚ñ∏ Dom√≠nio:${RESET} ${DOMAIN}                                    ${AZUL}‚ïë"
    echo "‚ïë  ${VERDE}‚ñ∏ IP VPS:${RESET} ${VPS_IP}                                      ${AZUL}‚ïë"
    echo "‚ïë  ${VERDE}‚ñ∏ Vers√£o:${RESET} ${VERSION}                                           ${AZUL}‚ïë"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${RESET}\n"
    sleep 2
}

# Checkpoint functions
create_checkpoint() {
    echo "$1" > $CHECKPOINT_FILE
    log "Checkpoint criado: Fase $1" "info"
}

load_checkpoint() {
    if [ -f $CHECKPOINT_FILE ]; then
        cat $CHECKPOINT_FILE
    else
        echo 0
    fi
}

# Verificar erro
check_error() {
    if [ $1 -ne 0 ]; then
        log "$2" "error"
        exit 1
    fi
}

# FASE 1: Preparar sistema
preparar_sistema() {
    log "Preparando sistema para Team Manager" "phase" "1"
    
    # Verificar root
    if [[ $EUID -ne 0 ]]; then
        log "Este script deve ser executado como root" "error"
        exit 1
    fi
    
    # Atualizar sistema
    apt-get update -qq
    apt-get install -y curl wget git nginx ufw software-properties-common
    
    create_checkpoint 1
}

# FASE 2: Instalar Node.js
instalar_nodejs() {
    log "Instalando Node.js LTS" "phase" "2"
    
    curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
    apt-get install -y nodejs
    
    log "Node.js $(node --version) instalado" "success"
    log "NPM $(npm --version) instalado" "success"
    
    create_checkpoint 2
}

# FASE 3: Clonar reposit√≥rio
clonar_repositorio() {
    log "Clonando reposit√≥rio Team Manager" "phase" "3"
    
    # Configurar Git
    git config --global user.name "sixquasar"
    git config --global user.email "$EMAIL"
    
    # Remover diret√≥rio se existir
    if [ -d "$APP_DIR" ]; then
        rm -rf "$APP_DIR"
    fi
    
    # Clonar
    git clone --depth 1 -b "$BRANCH" "$REPO_URL" "$APP_DIR"
    check_error $? "Falha ao clonar reposit√≥rio"
    
    create_checkpoint 3
}

# FASE 4: Instalar depend√™ncias
instalar_dependencias() {
    log "Instalando depend√™ncias do projeto" "phase" "4"
    
    cd "$APP_DIR"
    
    # Limpar cache e node_modules se existir
    rm -rf node_modules package-lock.json
    npm cache clean --force
    
    # Instalar depend√™ncias
    npm install
    check_error $? "Falha ao instalar depend√™ncias"
    
    log "Depend√™ncias instaladas com sucesso" "success"
    create_checkpoint 4
}

# FASE 5: Build de produ√ß√£o
build_producao() {
    log "Executando build de produ√ß√£o" "phase" "5"
    
    cd "$APP_DIR"
    
    # Criar .env
    cat > .env << EOF
VITE_APP_URL=https://$DOMAIN
VITE_API_URL=https://$DOMAIN/api
NODE_ENV=production
VITE_APP_TITLE=Team Manager
VITE_APP_VERSION=$VERSION
EOF
    
    # Build
    npm run build
    check_error $? "Falha no build"
    
    log "Build criado com sucesso" "success"
    create_checkpoint 5
}

# FASE 6: Configurar Nginx
configurar_nginx() {
    log "Configurando Nginx" "phase" "6"
    
    # Parar Nginx
    systemctl stop nginx
    
    # Criar configura√ß√£o
    cat > /etc/nginx/sites-available/team-manager << 'EOF'
server {
    listen 80;
    server_name sixquasar.pro;
    
    root /var/www/team-manager/dist;
    index index.html;
    
    # Logs
    access_log /var/log/nginx/team-manager.access.log;
    error_log /var/log/nginx/team-manager.error.log;
    
    # SPA configuration
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    # Assets com cache
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Gzip
    gzip on;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript;
}
EOF
    
    # Ativar site
    rm -f /etc/nginx/sites-enabled/default
    ln -sf /etc/nginx/sites-available/team-manager /etc/nginx/sites-enabled/
    
    # Testar
    nginx -t
    check_error $? "Configura√ß√£o Nginx inv√°lida"
    
    create_checkpoint 6
}

# FASE 7: Configurar SSL
configurar_ssl() {
    log "Configurando SSL com Let's Encrypt" "phase" "7"
    
    # Instalar Certbot
    apt-get install -y certbot python3-certbot-nginx
    
    # Iniciar Nginx
    systemctl start nginx
    
    # Obter certificado
    certbot --nginx -d "$DOMAIN" \
        --non-interactive \
        --agree-tos \
        --email "$EMAIL" \
        --redirect
    
    # Renova√ß√£o autom√°tica
    (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -
    
    log "SSL configurado com sucesso" "success"
    create_checkpoint 7
}

# FASE 8: Configurar firewall e permiss√µes
configurar_seguranca() {
    log "Configurando seguran√ßa" "phase" "8"
    
    # Firewall
    ufw --force reset
    ufw default deny incoming
    ufw default allow outgoing
    ufw allow ssh
    ufw allow 'Nginx Full'
    ufw --force enable
    
    # Permiss√µes
    chown -R www-data:www-data "$APP_DIR"
    chmod -R 755 "$APP_DIR"
    
    # Reiniciar Nginx
    systemctl restart nginx
    systemctl enable nginx
    
    create_checkpoint 8
}

# Status final
status_final() {
    log "Deploy conclu√≠do!" "phase" "FINAL"
    
    echo -e "\n${VERDE}${NEGRITO}=== TEAM MANAGER DEPLOY CONCLU√çDO ===${RESET}\n"
    echo -e "${AZUL}üöÄ APLICA√á√ÉO:${RESET}"
    echo -e "   üåê URL: ${VERDE}https://$DOMAIN${RESET}"
    echo -e "   üìÅ Diret√≥rio: ${VERDE}$APP_DIR${RESET}"
    echo -e "   üîß Nginx: ${VERDE}$(systemctl is-active nginx)${RESET}"
    
    echo -e "\n${AZUL}üìù PR√ìXIMOS PASSOS:${RESET}"
    echo -e "   1. Acesse o Supabase e execute: ${VERDE}SISTEMA_TEAM_MANAGER_COMPLETO.sql${RESET}"
    echo -e "   2. Configure as vari√°veis de ambiente do Supabase no .env"
    echo -e "   3. Teste o login com: ${VERDE}ricardo@techsquad.com / senha123${RESET}"
    
    echo -e "\n${AZUL}üõ†Ô∏è COMANDOS √öTEIS:${RESET}"
    echo -e "   Logs: ${VERDE}tail -f /var/log/nginx/team-manager.error.log${RESET}"
    echo -e "   Reiniciar: ${VERDE}systemctl restart nginx${RESET}"
    echo -e "   Status: ${VERDE}systemctl status nginx${RESET}"
    
    # Limpar checkpoint
    rm -f "$CHECKPOINT_FILE"
}

# Main
main() {
    show_banner
    
    # Verificar checkpoint
    LAST_PHASE=$(load_checkpoint)
    
    if [ $LAST_PHASE -gt 0 ]; then
        echo -e "${AMARELO}Checkpoint encontrado: Fase $LAST_PHASE${RESET}"
        read -p "Continuar de onde parou? (s/n): " choice
        if [[ "$choice" != "s" ]]; then
            rm -f "$CHECKPOINT_FILE"
            LAST_PHASE=0
        fi
    fi
    
    # Executar fases
    [ $LAST_PHASE -lt 1 ] && preparar_sistema
    [ $LAST_PHASE -lt 2 ] && instalar_nodejs
    [ $LAST_PHASE -lt 3 ] && clonar_repositorio
    [ $LAST_PHASE -lt 4 ] && instalar_dependencias
    [ $LAST_PHASE -lt 5 ] && build_producao
    [ $LAST_PHASE -lt 6 ] && configurar_nginx
    [ $LAST_PHASE -lt 7 ] && configurar_ssl
    [ $LAST_PHASE -lt 8 ] && configurar_seguranca
    
    status_final
}

# Executar
main "$@"